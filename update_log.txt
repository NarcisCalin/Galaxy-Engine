//Update on 4 April 2025:

/*
CPU Multitreading optimizaion Summary:
---------------------------
- fully parallelized particle updates, force calculations, quadtree builds, and rendering using OpenMP.
- buildQuadtree():
    - Parallelized with #pragma omp parallel for.
    - Protected quadtree->insert() with #pragma omp critical to avoid race conditions.
- applyForces():
    - Parallelized with #pragma omp parallel for.
    - Each particle only interacts with nearby particles using a quadtree spatial query (local 100x100 area).
- updateParticles():
    - Parallelized with #pragma omp parallel for.
    - Forces and velocity updates scaled by frame time (GetFrameTime()) for frame-rate independent simulation.
- drawParticles():
    - Parallelized with #pragma omp parallel for.
    - Each particle drawn independently.
- handleInput():
    - Parallelized clearing of particle selection flags.
- InitParticles():
    - Pre-sized particle vector, then initialized particles in parallel.
- Increased default particle count (InitParticles(100000)) to stress CPU.

 heres the result:
- Supports 10000+ particles at higher FPS (like from 8 to 12fps) on modern CPUs, I havent tested if this is more effective on low end CPUs yet.
- I noticed a little less CPU utilization.
- overall I think this isnt a too big of a improvement, but I got a little FPS boost (I had 6fps @ 20K particles, now its like 10-12fps)
*/

/*
  April 13, 2025, optimizations:

 Unified selection logic into a handleSelection() lambda (DRY principle).
 Shortened vector math using Vector2Subtract and Vector2LengthSqr.
 Default initialized everything in the constructor initializer list.
 Reused conditions like dragStarted and dragging.
 Kept all variable names the same to preserve meaning.

 I wrote negative lines of code, like -45 or something,
 I don't know if that's good or bad, but if it's short, simple, works and readable, then I'm not complaining.

 micro optimization at line 173


        /* For Line 173:

        / 2.0f -> slow division

            * 0.5f -> fast multiplication
        */
<<<<<<< HEAD

update for 13 april 2025:

I fixed lots of compiler errors, I dont know if the compiler tells me im good or if there is a warning, it dosent really tell me directly.

anyways, I fixed lots of bugs, there was this strange bug where individual particles appeared on the screen, that was probably my bad coding.

but that dosent matter, I fixed it now (I think)

anyways, I hope I get better at this...

second update today:

I fixed the code, but it appears as the compiler breaks some code.
=======
April 13 2025 continued:

I fixed some compiler errors I had for release, but I got a strange bug where only invidiual particles are on the screen.

Strange indeed... I will try to fix it soon.
>>>>>>> f6c91c3f4a4652aaff287770a52ee3291a793c20
